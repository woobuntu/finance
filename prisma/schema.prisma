// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Side {
  DEBIT
  CREDIT
}

model Account {
  name                               String                @id
  createdAt                          DateTime              @default(now())
  updatedAt                          DateTime              @updatedAt
  side                               Side
  parentAccountName                  String?
  parentAccount                      Account?              @relation("AccountHierarchy", fields: [parentAccountName], references: [name])
  childAccounts                      Account[]             @relation("AccountHierarchy")
  debitRelatedTransactions           Transaction[]         @relation("Debit")
  creditRelatedTransactions          Transaction[]         @relation("Credit")
  debitRelatedPeriodicTransactions   PeriodicTransaction[] @relation("PeriodicDebit")
  creditRelaterdPeriodicTransactions PeriodicTransaction[] @relation("PeriodicCredit")
}

// 예상 거래를 따로 구분하지 않는다. 
// 예상 거래일이 도래했을 때 실제 거래에 맞게끔 수정 분개하면 된다.
model Transaction {
  id                         Int                         @id @default(autoincrement())
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @updatedAt
  amount                     Int
  date                       DateTime
  note                       String?
  debit                      Account                     @relation("Debit", fields: [debitAccountName], references: [name])
  debitAccountName           String
  credit                     Account                     @relation("Credit", fields: [creditAccountName], references: [name])
  creditAccountName          String
  periodicTransactionRecords PeriodicTransactionRecord[]
  transactionTags            TransactionTag[]
}

enum Interval {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

model PeriodicTransaction {
  id                         Int                         @id @default(autoincrement())
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @updatedAt
  amount                     Int
  interval                   Interval
  startDate                  DateTime
  endDate                    DateTime
  note                       String?
  debit                      Account                     @relation("PeriodicDebit", fields: [debitAccountName], references: [name])
  debitAccountName           String
  credit                     Account                     @relation("PeriodicCredit", fields: [creditAccountName], references: [name])
  creditAccountName          String
  periodicTransactionRecords PeriodicTransactionRecord[]
}

// relation table between periodic transaction and transaction
model PeriodicTransactionRecord {
  id                    Int                 @id @default(autoincrement())
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  periodicTransaction   PeriodicTransaction @relation(fields: [periodicTransactionId], references: [id])
  periodicTransactionId Int
  transaction           Transaction         @relation(fields: [transactionId], references: [id])
  transactionId         Int
}

model Tag {
  name            String           @id
  createdAt       DateTime         @default(now())
  transactionTags TransactionTag[]
}

model TransactionTag {
  id            Int         @id @default(autoincrement())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  transactionId Int
  tag           Tag         @relation(fields: [tagName], references: [name])
  tagName       String
}
